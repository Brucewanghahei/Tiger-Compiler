Standard ML of New Jersey v110.82 [built: Sat Apr 21 13:24:41 2018]
[scanning sources.cm]
[attempting to load plugin $/lex-ext.cm]
[library $/lex-ext.cm is stable]
[library $smlnj/cm/tools.cm is stable]
[library $smlnj/internal/cm-lib.cm is stable]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[plugin $/lex-ext.cm loaded successfully]
[attempting to load plugin $/mllex-tool.cm]
[library $/mllex-tool.cm is stable]
[plugin $/mllex-tool.cm loaded successfully]
[attempting to load plugin $/grm-ext.cm]
[library $/grm-ext.cm is stable]
[plugin $/grm-ext.cm loaded successfully]
[attempting to load plugin $/mlyacc-tool.cm]
[library $/mlyacc-tool.cm is stable]
[plugin $/mlyacc-tool.cm loaded successfully]
[parsing (sources.cm):mipsframe.sml]
[library $/ml-yacc-lib.cm is stable]
[library $SMLNJ-LIB/Util/smlnj-lib.cm is stable]
[library $SMLNJ-ML-YACC-LIB/ml-yacc-lib.cm is stable]
[loading (sources.cm):table.sig]
[loading (sources.cm):table.sml]
[loading (sources.cm):symbol.sml]
[loading (sources.cm):temp.sig]
[loading (sources.cm):temp.sml]
[loading (sources.cm):tree.sml]
[loading (sources.cm):errormsg.sml]
[loading (sources.cm):assem.sml]
[loading (sources.cm):frame.sig]
[compiling (sources.cm):mipsframe.sml]
mipsframe.sml:106.46-106.82 Warning: binding not exhaustive
          SOME e = ...
[code: 20575, data: 499, env: 911 bytes]
[loading (sources.cm):absyn.sml]
[loading (sources.cm):translate.sig]
[loading (sources.cm):translate.sml]
[loading (sources.cm):prabsyn.sml]
[loading (sources.cm):tiger.grm.sig]
[loading (sources.cm):findescape.sml]
[loading (sources.cm):tiger.lex.sml]
[loading (sources.cm):funcgraph.sig]
[loading (sources.cm):types.sml]
[loading (sources.cm):tiger.grm.sml]
[loading (sources.cm):parsetest.sml]
[loading (sources.cm):funcgraph.sml]
[loading (sources.cm):flowgraph.sml]
[loading (sources.cm):makegraph.sml]
[loading (sources.cm):liveness.sig]
[loading (sources.cm):liveness.sml]
[loading (sources.cm):color.sml]
[loading (sources.cm):canon.sml]
[loading (sources.cm):color.sig]
[loading (sources.cm):codegen.sig]
[loading (sources.cm):printtree.sml]
[loading (sources.cm):env.sml]
[loading (sources.cm):semant.sml]
[loading (sources.cm):mips.sml]
[loading (sources.cm):main.sml]
[New bindings added.]
- [autoloading]
[library $smlnj/cm/cm.cm is stable]
[library $smlnj/internal/cm-sig-lib.cm is stable]
[library $/pgraph.cm is stable]
[library $smlnj/internal/srcpath-lib.cm is stable]
[autoloading done]
[scanning sources.cm]
[loading (sources.cm):table.sig]
[loading (sources.cm):table.sml]
[loading (sources.cm):symbol.sml]
[loading (sources.cm):errormsg.sml]
[loading (sources.cm):absyn.sml]
[loading (sources.cm):prabsyn.sml]
[loading (sources.cm):tiger.lex.sml]
[loading (sources.cm):types.sml]
[loading (sources.cm):parsetest.sml]
[New bindings added.]
val it = true : bool
emit tig_main
LABEL L4
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t125,
   CONST ~4)),
 TEMP t127)
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t125,
   CONST ~8)),
 TEMP t113)
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t125,
   CONST ~12)),
 TEMP t114)
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t125,
   CONST ~16)),
 TEMP t115)
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t125,
   CONST ~20)),
 TEMP t116)
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t125,
   CONST ~24)),
 TEMP t117)
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t125,
   CONST ~28)),
 TEMP t118)
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t125,
   CONST ~32)),
 TEMP t119)
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t125,
   CONST ~36)),
 TEMP t120)
MOVE(
 TEMP t128,
 CALL(
  NAME printf,
   MEM(
    TEMP t125),
   NAME L2))
MOVE(
 TEMP t120,
 MEM(
  BINOP(PLUS,
   TEMP t125,
   CONST ~36)))
MOVE(
 TEMP t119,
 MEM(
  BINOP(PLUS,
   TEMP t125,
   CONST ~32)))
MOVE(
 TEMP t118,
 MEM(
  BINOP(PLUS,
   TEMP t125,
   CONST ~28)))
MOVE(
 TEMP t117,
 MEM(
  BINOP(PLUS,
   TEMP t125,
   CONST ~24)))
MOVE(
 TEMP t116,
 MEM(
  BINOP(PLUS,
   TEMP t125,
   CONST ~20)))
MOVE(
 TEMP t115,
 MEM(
  BINOP(PLUS,
   TEMP t125,
   CONST ~16)))
MOVE(
 TEMP t114,
 MEM(
  BINOP(PLUS,
   TEMP t125,
   CONST ~12)))
MOVE(
 TEMP t113,
 MEM(
  BINOP(PLUS,
   TEMP t125,
   CONST ~8)))
MOVE(
 TEMP t127,
 MEM(
  BINOP(PLUS,
   TEMP t125,
   CONST ~4)))
JUMP(
 NAME L3)
LABEL L3
L4:
sw $ra, -4($fp)
sw $s0, -8($fp)
sw $s1, -12($fp)
sw $s2, -16($fp)
sw $s3, -20($fp)
sw $s4, -24($fp)
sw $s5, -28($fp)
sw $s6, -32($fp)
sw $s7, -36($fp)
addi $sp, $sp, -40
sw $t0, 0($sp)
sw $t1, 4($sp)
sw $t2, 8($sp)
sw $t3, 12($sp)
sw $t4, 16($sp)
sw $t5, 20($sp)
sw $t6, 24($sp)
sw $t7, 28($sp)
sw $t8, 32($sp)
sw $t9, 36($sp)
addi $sp, $sp, -8
lw $sp, 0($fp)
la $a0, L2
jal printf
addi $sp, $sp, 8
lw $t0, 0($sp)
lw $t1, 4($sp)
lw $t2, 8($sp)
lw $t3, 12($sp)
lw $t4, 16($sp)
lw $t5, 20($sp)
lw $t6, 24($sp)
lw $t7, 28($sp)
lw $t8, 32($sp)
lw $t9, 36($sp)
addi $sp, $sp, 40
add $v0, $v0, $zero
lw $s7, -36($fp)
lw $s6, -32($fp)
lw $s5, -28($fp)
lw $s4, -24($fp)
lw $s3, -20($fp)
lw $s2, -16($fp)
lw $s1, -12($fp)
lw $s0, -8($fp)
lw $ra, -4($fp)
j L3
L3:
=========================
Register Allocation
$v1 <- $v1
$a0 <- $a0
$a1 <- $a1
$a2 <- $a2
$a3 <- $a3
$t0 <- $t0
$t1 <- $t1
$t2 <- $t2
$t3 <- $t3
$t4 <- $t4
$t5 <- $t5
$t6 <- $t6
$t7 <- $t7
$s0 <- $s0
$s1 <- $s1
$s2 <- $s2
$s3 <- $s3
$s4 <- $s4
$s5 <- $s5
$s6 <- $s6
$s7 <- $s7
$t8 <- $t8
$t9 <- $t9
$zero <- $zero
$fp <- $fp
$sp <- $sp
$ra <- $ra
$v0 <- $v0
================
Interference Graph
Node: $fp
 -> Neighbors:
   $ra
   $s0
   $s1
   $s2
   $s3
   $s4
   $s5
   $s6
   $s7
   $sp
   $t0
   $t1
   $t2
   $t3
   $t4
   $t5
   $t6
   $t7
   $t8
   $t9
   $a0
   $v0
Node: $ra
 -> Neighbors:
   $fp
   $s0
   $s1
   $s2
   $s3
   $s4
   $s5
   $s6
   $s7
   $sp
   $t0
   $t1
   $t2
   $t3
   $t4
   $t5
   $t6
   $t7
   $t8
   $t9
   $zero
Node: $s0
 -> Neighbors:
   $fp
   $ra
   $s1
   $s2
   $s3
   $s4
   $s5
   $s6
   $s7
   $sp
   $t0
   $t1
   $t2
   $t3
   $t4
   $t5
   $t6
   $t7
   $t8
   $t9
   $zero
Node: $s1
 -> Neighbors:
   $fp
   $ra
   $s0
   $s2
   $s3
   $s4
   $s5
   $s6
   $s7
   $sp
   $t0
   $t1
   $t2
   $t3
   $t4
   $t5
   $t6
   $t7
   $t8
   $t9
   $zero
Node: $s2
 -> Neighbors:
   $fp
   $ra
   $s0
   $s1
   $s3
   $s4
   $s5
   $s6
   $s7
   $sp
   $t0
   $t1
   $t2
   $t3
   $t4
   $t5
   $t6
   $t7
   $t8
   $t9
   $zero
Node: $s3
 -> Neighbors:
   $fp
   $ra
   $s0
   $s1
   $s2
   $s4
   $s5
   $s6
   $s7
   $sp
   $t0
   $t1
   $t2
   $t3
   $t4
   $t5
   $t6
   $t7
   $t8
   $t9
   $zero
Node: $s4
 -> Neighbors:
   $fp
   $ra
   $s0
   $s1
   $s2
   $s3
   $s5
   $s6
   $s7
   $sp
   $t0
   $t1
   $t2
   $t3
   $t4
   $t5
   $t6
   $t7
   $t8
   $t9
   $zero
Node: $s5
 -> Neighbors:
   $fp
   $ra
   $s0
   $s1
   $s2
   $s3
   $s4
   $s6
   $s7
   $sp
   $t0
   $t1
   $t2
   $t3
   $t4
   $t5
   $t6
   $t7
   $t8
   $t9
   $zero
Node: $s6
 -> Neighbors:
   $fp
   $ra
   $s0
   $s1
   $s2
   $s3
   $s4
   $s5
   $s7
   $sp
   $t0
   $t1
   $t2
   $t3
   $t4
   $t5
   $t6
   $t7
   $t8
   $t9
   $zero
Node: $s7
 -> Neighbors:
   $fp
   $ra
   $s0
   $s1
   $s2
   $s3
   $s4
   $s5
   $s6
   $sp
   $t0
   $t1
   $t2
   $t3
   $t4
   $t5
   $t6
   $t7
   $t8
   $t9
   $zero
Node: $sp
 -> Neighbors:
   $fp
   $ra
   $s0
   $s1
   $s2
   $s3
   $s4
   $s5
   $s6
   $s7
   $t0
   $t1
   $t2
   $t3
   $t4
   $t5
   $t6
   $t7
   $t8
   $t9
   $a0
   $v0
   $zero
Node: $t0
 -> Neighbors:
   $fp
   $ra
   $s0
   $s1
   $s2
   $s3
   $s4
   $s5
   $s6
   $s7
   $sp
   $t1
   $t2
   $t3
   $t4
   $t5
   $t6
   $t7
   $t8
   $t9
Node: $t1
 -> Neighbors:
   $fp
   $ra
   $s0
   $s1
   $s2
   $s3
   $s4
   $s5
   $s6
   $s7
   $sp
   $t0
   $t2
   $t3
   $t4
   $t5
   $t6
   $t7
   $t8
   $t9
Node: $t2
 -> Neighbors:
   $fp
   $ra
   $s0
   $s1
   $s2
   $s3
   $s4
   $s5
   $s6
   $s7
   $sp
   $t0
   $t1
   $t3
   $t4
   $t5
   $t6
   $t7
   $t8
   $t9
Node: $t3
 -> Neighbors:
   $fp
   $ra
   $s0
   $s1
   $s2
   $s3
   $s4
   $s5
   $s6
   $s7
   $sp
   $t0
   $t1
   $t2
   $t4
   $t5
   $t6
   $t7
   $t8
   $t9
Node: $t4
 -> Neighbors:
   $fp
   $ra
   $s0
   $s1
   $s2
   $s3
   $s4
   $s5
   $s6
   $s7
   $sp
   $t0
   $t1
   $t2
   $t3
   $t5
   $t6
   $t7
   $t8
   $t9
Node: $t5
 -> Neighbors:
   $fp
   $ra
   $s0
   $s1
   $s2
   $s3
   $s4
   $s5
   $s6
   $s7
   $sp
   $t0
   $t1
   $t2
   $t3
   $t4
   $t6
   $t7
   $t8
   $t9
Node: $t6
 -> Neighbors:
   $fp
   $ra
   $s0
   $s1
   $s2
   $s3
   $s4
   $s5
   $s6
   $s7
   $sp
   $t0
   $t1
   $t2
   $t3
   $t4
   $t5
   $t7
   $t8
   $t9
Node: $t7
 -> Neighbors:
   $fp
   $ra
   $s0
   $s1
   $s2
   $s3
   $s4
   $s5
   $s6
   $s7
   $sp
   $t0
   $t1
   $t2
   $t3
   $t4
   $t5
   $t6
   $t8
   $t9
Node: $t8
 -> Neighbors:
   $fp
   $ra
   $s0
   $s1
   $s2
   $s3
   $s4
   $s5
   $s6
   $s7
   $sp
   $t0
   $t1
   $t2
   $t3
   $t4
   $t5
   $t6
   $t7
   $t9
Node: $t9
 -> Neighbors:
   $fp
   $ra
   $s0
   $s1
   $s2
   $s3
   $s4
   $s5
   $s6
   $s7
   $sp
   $t0
   $t1
   $t2
   $t3
   $t4
   $t5
   $t6
   $t7
   $t8
Node: $a0
 -> Neighbors:
   $fp
   $sp
Node: $a1
 -> Neighbors:
Node: $a2
 -> Neighbors:
Node: $a3
 -> Neighbors:
Node: $v0
 -> Neighbors:
   $fp
   $sp
Node: $zero
 -> Neighbors:
   $ra
   $s0
   $s1
   $s2
   $s3
   $s4
   $s5
   $s6
   $s7
   $sp
Move Edges:
$v0-$v0
val it = () : unit
- 
